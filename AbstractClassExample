//Write each class in a separate file. Unity requires components to have matching file names and class names. 
//Place the WoodenHittable component on an object.
//Place the AbstractTest component on the same object and on another random object.
//notice how the functionality works when the objects are together and the != null check prevents errors if hittable is not encountered.

using UnityEngine;

public abstract class Hittable : MonoBehaviour
{
   protected int health = 5;
   public abstract void TakeDamage(Weapon weapon);
}

public class WoodenHittable : Hittable
{
   public override void TakeDamage(Weapon weapon)
   {
      Debug.Log("Before being hit, the health was " + health);
      if (weapon.GetType() == Weapon.WeaponType.Axe)
         health -= weapon.GetDamage() * 3;
      else health -= weapon.GetDamage();

      Debug.Log("After being hit, the health is " + health);
   }
}

public class Weapon
{
   public enum WeaponType
   {
      Sword,
      Shovel,
      Pickaxe,
      Axe
   }

   private WeaponType _weaponType;

   public WeaponType GetType() => _weaponType;

   private int _damage = 1;

   public int GetDamage() => _damage;

   public Weapon(WeaponType weaponType)
   {
      _weaponType = weaponType;
   }
}

public class AbstractTest : MonoBehaviour
{
    // Start is called before the first frame update
    void Awake()
    {
        Weapon w = new Weapon(Weapon.WeaponType.Axe);
        Hittable h = gameObject.GetComponent<Hittable>();
        if (h != null)
            h.TakeDamage(w);
    }

}
